type Facility @model @key(name: "byUser", fields: ["userID"]) @auth(rules: [{allow: private}]) {
  id: ID!
  name: String!
  type: String!
  address: String!
  area: String!
  size: Int!
  rate: Float!
  description: String!
  opening_hrs: AWSTime!
  closing_hrs: AWSTime!
  operating_days: [String]!
  userID: ID!
  user: User! @connection(fields: ["userID"]) 
}

type User @model @auth(rules: [{allow: private}]) {
  id: ID!
  email: String!
  username: String!
  firstname: String
  lastname: String
  contact: String
  address: String
  Facilities: [Facility] @connection(keyName: "byUser", fields: ["id"])
  role: [String]
  booking: [Booking] @connection(keyName: "byCustID", fields: ["id"])
}

type Booking @model @key(name: "byCustID", fields: ["cust_id"]) @auth(rules: [{allow: private}]) {
  id: ID!
  booking_date: AWSDate!
  facility_id: ID!
  facility_name: String!
  rate: Float!
  address: String!
  area: String!
  status: String!
  cust_id: ID!
  facilityowner_id: ID!
  payment_id: ID
  slot_id: ID
  owner: User! @connection(fields: ["facilityowner_id"])
  customer: User! @connection(fields: ["cust_id"])
  payment: Payment @connection(fields: ["payment_id"])
  slot: Slot @connection(fields: ["slot_id"])
}

type Slot @model @auth(rules: [{allow: private}]) {
  id: ID!
  start_time: AWSTime!
  end_time: AWSTime!
  duration: Int!
}

type Payment @model @auth(rules: [{allow: private}]) {
  id: ID!
  payment_date: AWSDateTime!
  paid_amt: Float!
  status: String!
  booking_id: ID
  booking: Booking! @connection(fields: ["booking_id"])
}

type Subscription {
  onCreateFacilityByUserId(userID: ID!): Facility
  @aws_subscribe(mutations: ["createFacility"])
  onDeleteFacilityByUserId(userID: ID!): Facility
  @aws_subscribe(mutations: ["deleteFacility"])
  onUpdateFacilityByUserId(userID: ID!): Facility
  @aws_subscribe(mutations: ["updateFacility"])
}

 